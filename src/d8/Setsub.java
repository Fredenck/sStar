/*
 * Sets - Subsets
==============

You are given a set of numbers. Print all subsets except the empty set that 
can be formed by the numbers in the given set. The numbers must be used in 
the order as in the given set. For the following input

The number set: 4 3 8

The first four numbers must be

4
3
8
43

PROBLEM NAME: setsub

INPUT FORMAT:

* Line 1: A single integer: M

* Line 2: M space-seperated integers: number set

SAMPLE INPUT:

3
4 3 8

OUTPUT FORMAT:

* Lines 1..?: An N-digit combination generated by the numbers in the given set

SAMPLE OUTPUT:

4
3
8
43
48
38
438
 */
package d8;

import java.io.*;

public class Setsub {
	
	public static void main(String[] args) throws IOException {
		long startTime = System.nanoTime();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int N = Integer.parseInt(br.readLine());
		String[] numSet = br.readLine().split(" ");
		int[] numSetInt = new int[N];
		for (int i=0; i<N; i++){
			numSetInt[i] = Integer.parseInt(numSet[i]);
		}
		
		int[] ans = new int[N];
		int[] used = new int[N];
		
		for (int i=1; i<N+1; i++){
			Comb(0,0,i,N,ans,used,numSetInt);
		}
		
		
		System.out.println("Took "+(double)(System.nanoTime() - startTime)/1000000000 + " s");
		br.close();
	}
	//used should be:
	//100, 010, 001, 110, 101, 011, 111
	public static void Comb(int e, int picked, int n, int m, int[] ans, int[] used, int[] numSetInt){
		if (e == m){
			if (picked == n){
				for (int i=0; i<m; i++){
					if (used[i]==1){
						System.out.print(numSetInt[i]);							
					}
				}		
				System.out.println();	
			}
			return;
		}
	
		used[e] = 1;
		Comb(e+1, picked+1, n, m, ans, used, numSetInt);
		used[e] = 0;
		Comb(e+1, picked, n, m, ans, used, numSetInt);
}
}
