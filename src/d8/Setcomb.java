/*
 * Sets - N-Digit Combinations
===========================

You are given a set of numbers and a number N. Print all N-digit combinations 
that can be formed by the numbers in the given set. The numbers must be used 
in the order as in the given set. For the following input

The number set: 4 3 8 5
N: 3

The first four numbers must be

438
435
485
385

PROBLEM NAME: setcomb

INPUT FORMAT:

* Line 1: A single integer: M

* Line 2: M space-seperated integers: number set

* Line 3: A single integer: N

SAMPLE INPUT:

4
4 3 8 5
3

OUTPUT FORMAT:

* Lines 1..?: An N-digit combination generated by the numbers in the given set

SAMPLE OUTPUT:

438
435
485
385
 */
package d8;

import java.io.*;

public class Setcomb {
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int M = Integer.parseInt(br.readLine());
		String[] numSet = br.readLine().split(" ");
		int N = Integer.parseInt(br.readLine());
		int[] numSetInt = new int[M];
		for (int i=0; i<M; i++){
			numSetInt[i] = Integer.parseInt(numSet[i]);
		}
		
		int[] ans = new int[N];
		int[] used = new int[M];
		Comb(0,0,N,M,ans,used,numSetInt);
		
//		System.out.println("Took "+(double)(System.nanoTime() - startTime)/1000000000 + " s");
		br.close();
	}
	public static void Comb(int e, int picked, int n, int m, int[] ans, int[] used, int[] numSetInt){
			if (e == m){
				if (picked == n){
					for (int i=0; i<m; i++){
						if (used[i]==1){
							System.out.print(numSetInt[i]);							
						}
					}		
					System.out.println();	
				}
				return;
			}
		
		used[e] = 1;
		Comb(e+1, picked+1, n, m, ans, used, numSetInt);
		used[e] = 0;
		Comb(e+1, picked, n, m, ans, used, numSetInt);
	}
}
